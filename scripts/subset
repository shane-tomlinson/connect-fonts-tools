#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path          = require('path'),
      fs            = require('fs'),
      subset        = require('../lib/subset'),
      generate_fonts_from_ttf
                    = require('../lib/generate_fonts_from_ttf')
      generic_config        
                    = require('../lib/generic_config'),
      SUPPORTED_SUBSETS
                    = subset.SUPPORTED_SUBSETS,
      program       = require('commodore')
                          .description('Create a locale-optimized font set')
                          .option('-s, --ss <subset>', 'subset to create.')
                          .demand('ss')
                          .comboof('ss', SUPPORTED_SUBSETS)
                          .option('--sp <source_path>', 'Source Path')
                          .demand('sp')
                          .option('--tp <target_path>', 'Target Path')
                          .demand('tp')
                          .option('-o', 'place subsets into subdirectories of target')
                          .option('--wf', 'create web fonts (svg, eot, woff) of each subset')
                          .parse(process.argv);

var sourcePath = generic_config.resolve(process.cwd(), program.sp);
var targetPath = generic_config.resolve(process.cwd(), program.tp);

fs.stat(sourcePath, function(err, stats) {
  if (err) showErrorAndExit(err);

  if (stats.isDirectory()) {
    ls(sourcePath, /\.ttf$/i, true, function(err, files) {
      if (err) showErrorAndExit(err);

      var ttfPaths = files.map(function(fileName) {
        return path.join(sourcePath, fileName);
      });

      subsetNext();

      function subsetNext() {
        var ttfPath = ttfPaths.shift();
        if (!ttfPath) return;

        subsetFont(ttfPath, function(err) {
          if (err) showErrorAndExit(err);
          subsetNext();
        });
      }
    });
  } else {
    subsetFont(sourcePath, function(err) {
      if (err) showErrorAndExit(err);
    });
  }
});

function subsetFont(sourcePath, done) {
  subset.subset(program.ss, sourcePath, targetPath, program.O, function(err, subsettedFonts) {
    if (err) showErrorAndExit(err);

    if (program.wf) {
      createNextWebfont();
    }

    function createNextWebfont() {
      var subsettedFont = subsettedFonts.shift();
      if (!subsettedFont) return done(null);

      generate_fonts_from_ttf.write(subsettedFont, path.dirname(subsettedFont), function(err) {
        if (err) return done(err);

        createNextWebfont();
      });
    }
  });
}

function showErrorAndExit(err) {
  console.error(String(err));
  process.exit(1);
}

function ls(target, matchRegExp, warn, done) {
  fs.readdir(target, function(err, files) {
    if (err) return done(err);

    var matches = [];
    files.forEach(function(fileName) {
      fileName = fileName.trim();
      if (matchRegExp.test(fileName)) {
        matches.push(fileName);
      } else if (warn) {
        console.warn(fileName + " does not match: " + matchRegExp);
      }
    });

    done(null, matches);
  });
};

